[project]
# This is the name of your project. The first time you publish this
# package, this name will be registered for you. It will determine how
# users can install this project, e.g.:
#
# $ pip install {{ cookiecutter.repository_name }}
#
# And where it will live on PyPI: https://pypi.org/project/{{ cookiecutter.repository_name }}/
#
# There are some restrictions on what makes a valid project name
# specification here:
# https://packaging.python.org/specifications/core-metadata/#name
name = "{{ cookiecutter.repository_name }}"  # Required

# Versions should comply with PEP 440:
# https://www.python.org/dev/peps/pep-0440/
#
# For a discussion on single-sourcing the version, see
# https://packaging.python.org/guides/single-sourcing-package-version/
version = "{{ cookiecutter.version }}"  # Required

# This is a one-line description or tagline of what your project does. This
# corresponds to the "Summary" metadata field:
# https://packaging.python.org/specifications/core-metadata/#summary
description = "{{ cookiecutter.project_short_description }}"  # Optional

# This is an optional longer description of your project that represents
# the body of text which users will see when they visit PyPI.
#
# Often, this is the same as your README, so you can just read it in from
# that file directly (as we have already done above)
#
# This field corresponds to the "Description" metadata field:
# https://packaging.python.org/specifications/core-metadata/#description-optional
readme = { file = "README.rst" } # Optional

# Specify which Python versions you support. In contrast to the
# 'Programming Language' classifiers above, 'pip install' will check this
# and refuse to install the project if the version does not match. See
# https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires
requires-python = ">={{ cookiecutter.min_python_version }}"

# This is either text indicating the license for the distribution, or a file
# that contains the license
# https://packaging.python.org/en/latest/specifications/core-metadata/#license
license = {file = "LICENSE.txt"}

# This field adds keywords for your project which will appear on the
# project page. What does your project relate to?
#
# Note that this is a list of additional keywords, separated
# by commas, to be used to assist searching for the distribution in a
# larger catalog.
keywords = ["sample", "setuptools", "development"]  # Optional

# This should be your name or the name of the organization who originally
# authored the project, and a valid email address corresponding to the name
# listed.
authors = [
  {name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}" } # Optional
]

# This should be your name or the names of the organization who currently
# maintains the project, and a valid email address corresponding to the name
# listed.
maintainers = [
  {name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}" } # Optional
]

{%- set license_classifiers = {
    'MIT license': 'License :: OSI Approved :: MIT License',
    'BSD license': 'License :: OSI Approved :: BSD License',
    'ISC license': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
    'GNU General Public License v3': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} %}

# Classifiers help users find your project by categorizing it.
#
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [  # Optional
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  {{ cookiecutter.release_status }},

  # Indicate who your project is intended for
{%- for audience_item in cookiecutter.classifiers.audience %}
  "{{ audience_item }}",
{%- endfor %}
{%- for os_item in cookiecutter.classifiers.os %}
  "{{ os_item }}",
{%- endfor %}
{%- for topic_item in cookiecutter.classifiers.topic %}
  "{{ topic_item }}",
{%- endfor %}

  # Pick your license as you wish
  "{{ license_classifiers[cookiecutter.open_source_license] }}",

  # Specify the Python versions you support here. In particular, ensure
  # that you indicate you support Python 3. These classifiers are *not*
  # checked by "pip install". See instead "python_requires" below.
  "Programming Language :: Python",
{%- for py_version_item in cookiecutter.classifiers.python_versions %}
  "Programming Language :: Python :: {{ py_version_item }}",
{%- endfor %}
]

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
dependencies = [ # Optional
{% if cookiecutter.command_line_interface | lower == 'click' %}  'Click>=8.0,{% endif%}'
]

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install {{ cookiecutter.repository_name }}[dev]
#
# Similar to `dependencies` above, these must be valid existing
# projects.
[project.optional-dependencies] # Optional
dev = [
{% if cookiecutter.use_coverage != "n" %}  "coverage",{% endif%}
{% if cookiecutter.use_pytest != "n" %}  "pytest",{% endif%}
  "pre-commit"
]
test = [
{% if cookiecutter.use_coverage != "n" %}  "coverage",{% endif%}
{% if cookiecutter.use_pytest != "n" %}  "pytest",{% endif%}
]

# List URLs that are relevant to your project
#
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
#
# Examples listed include a pattern for specifying where the package tracks
# issues, where the source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is
# what's used to render the link text on PyPI.
[project.urls]  # Optional
"Homepage" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repository_name }}"
"Bug Reports" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repository_name }}/issues"
# "Funding" = "https://donate.pypi.org"
# "Say Thanks!" = "http://saythanks.io/to/example"
"Source" = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.repository_name }}"

# The following would provide a command line executable called `sample`
# which executes the function `main` from this package when invoked.
[project.scripts]  # Optional
{%- if 'n' not in cookiecutter.command_line_interface|lower %}
{{ cookiecutter.package_name }} = '{{ cookiecutter.package_name }}.cli:main'
{%- endif %}

# The next lines represent the tox configuration as an inline .ini file
[tool.tox]
legacy_tox_ini = """
  [tox]
  requires =
    tox>4
    virtualenv>20.2
  min_version = 4.0
  env_list =
{%- set _min_minor_version = cookiecutter.min_python_version | replace('3.', '') | int %}
{%- set _max_minor_version = cookiecutter.max_python_version | replace('3.', '') | int %}
{%- for minor_version in range(_min_minor_version, _max_minor_version) %}
    py3{{ minor_version }}
{%- endfor %}
{% if cookiecutter.use_coverage != "n" %}    coverage{%- endif%}

{%- if cookiecutter.cicd_tool == "github-actions" %}
  [gh-actions]
  python =
{%- for minor_version in range(_min_minor_version, _max_minor_version) %}
    3.{{ minor_version }}: py3{{ minor_version }}{%- if cookiecutter.use_coverage !="n" %}, coverage{%- endif%}
{%- endfor%}
{%- endif%}

{%- if cookiecutter.use_pytest != "n" %}
  [testenv]
  description = run unit tests
  deps = 
    pytest
  commands = pytest tests { posargs }

{%- if cookiecutter.use_coverage != "n" %}
  [coverage]
  description = run test coverage analysis
  deps = 
    pytest
    pytest-cov
  commands = 
    pytest --cov --cov-append --cov-report=term-missing
  
  [coverage:clean]
  description = remove coverage reports
  deps = coverage
  skip_install = true
  commands = coverage erase
{%- endif%}
"""
{%- endif%}


# This is configuration specific to the `setuptools` build backend.
# If you are using a different build backend, you will need to change this.
[tool.setuptools]
# If there are data files included in your packages that need to be
# installed, specify them here.
# package-data = {"sample" = ["*.dat"]}

[build-system]
# These are the assumed default build requirements from pip:
# https://pip.pypa.io/en/stable/reference/pip/#pep-517-and-518-support
requires = ["setuptools>=43.0.0", "wheel"]
build-backend = "setuptools.build_meta"